============================= test session starts =============================
platform win32 -- Python 3.9.2, pytest-7.1.2, pluggy-1.0.0
rootdir: C:\xampp\htdocs\python\OCRNightmare\backend
plugins: cov-3.0.0
collected 33 items

tests\feature\routes\test_home_route.py .....                            [ 15%]
tests\feature\routes\admin\test_admin_route.py ..                        [ 21%]
tests\feature\routes\admin\test_admin_users_route.py ...                 [ 30%]
tests\feature\routes\admin\test_admin_users_uid_route.py FFF             [ 39%]
tests\feature\routes\auth\test_auth_login_route.py ......                [ 57%]
tests\feature\routes\auth\test_auth_register_route.py .........          [ 84%]
tests\feature\routes\auth\test_auth_route.py ....                        [ 96%]
tests\unit\config_env\test_config.py .                                   [100%]

================================== FAILURES ===================================
__________________ test_admin_users_uid_page_get_returns_200 __________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

C:\Program Files\Python39\lib\unittest\mock.py:1334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python39\lib\contextlib.py:117: in __enter__
    return next(self.gen)
C:\Program Files\Python39\lib\unittest\mock.py:1316: in decoration_helper
    arg = exit_stack.enter_context(patching)
C:\Program Files\Python39\lib\contextlib.py:429: in enter_context
    result = _cm_type.__enter__(cm)
C:\Program Files\Python39\lib\unittest\mock.py:1405: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000236A6DA01F0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'app.interfaces.db_user_if.DBUserI'> does not have the attribute 'get_user'

C:\Program Files\Python39\lib\unittest\mock.py:1378: AttributeError
_____________________ test_admin_users_uid_response_shape _____________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

C:\Program Files\Python39\lib\unittest\mock.py:1334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python39\lib\contextlib.py:117: in __enter__
    return next(self.gen)
C:\Program Files\Python39\lib\unittest\mock.py:1316: in decoration_helper
    arg = exit_stack.enter_context(patching)
C:\Program Files\Python39\lib\contextlib.py:429: in enter_context
    result = _cm_type.__enter__(cm)
C:\Program Files\Python39\lib\unittest\mock.py:1405: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000236A6DA00D0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'app.interfaces.db_user_if.DBUserI'> does not have the attribute 'get_user'

C:\Program Files\Python39\lib\unittest\mock.py:1378: AttributeError
___________________ test_admin_users_uid_gets_list_of_users ___________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

C:\Program Files\Python39\lib\unittest\mock.py:1334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python39\lib\contextlib.py:117: in __enter__
    return next(self.gen)
C:\Program Files\Python39\lib\unittest\mock.py:1316: in decoration_helper
    arg = exit_stack.enter_context(patching)
C:\Program Files\Python39\lib\contextlib.py:429: in enter_context
    result = _cm_type.__enter__(cm)
C:\Program Files\Python39\lib\unittest\mock.py:1405: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000236A6DA09A0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'app.interfaces.db_user_if.DBUserI'> does not have the attribute 'get_user'

C:\Program Files\Python39\lib\unittest\mock.py:1378: AttributeError
=========================== short test summary info ===========================
FAILED tests/feature/routes/admin/test_admin_users_uid_route.py::test_admin_users_uid_page_get_returns_200
FAILED tests/feature/routes/admin/test_admin_users_uid_route.py::test_admin_users_uid_response_shape
FAILED tests/feature/routes/admin/test_admin_users_uid_route.py::test_admin_users_uid_gets_list_of_users
======================== 3 failed, 30 passed in 1.98s =========================
